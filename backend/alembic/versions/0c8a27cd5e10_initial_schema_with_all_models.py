"""ðŸŽ‰ initial_schema_with_all_models

Revision ID: 0c8a27cd5e10
Revises: 
Create Date: 2025-02-16 21:45:24.447199

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0c8a27cd5e10'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('youtube_category_id', sa.String(length=50), nullable=False, comment='Standard YouTube category ID'),
    sa.Column('name', sa.String(length=100), nullable=False, comment="Category name (e.g., 'Education', 'Technology')"),
    sa.Column('description', sa.String(length=500), nullable=True, comment='Optional category description'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_youtube_category_id'), 'categories', ['youtube_category_id'], unique=True)
    op.create_table('channels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('youtube_channel_id', sa.String(length=32), nullable=False, comment='Standard format: UC + 22 chars'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Channel name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Channel description'),
    sa.Column('channel_url', sa.String(length=128), nullable=False, comment='Channel URL'),
    sa.Column('thumbnail_url', sa.String(length=255), nullable=True, comment='Channel thumbnail URL'),
    sa.Column('subscriber_count', sa.Integer(), nullable=True, comment='Number of subscribers'),
    sa.Column('is_verified', sa.Boolean(), nullable=True, comment='Channel verification status'),
    sa.Column('uploader', sa.String(length=100), nullable=True, comment='Uploader name (same as channel name)'),
    sa.Column('uploader_id', sa.String(length=100), nullable=True, comment='Uploader handle/ID (@handle format)'),
    sa.Column('uploader_url', sa.String(length=128), nullable=True, comment='Uploader profile URL'),
    sa.Column('channel_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional channel metadata'),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment='Last metadata update timestamp'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_channels_id'), 'channels', ['id'], unique=False)
    op.create_index(op.f('ix_channels_youtube_channel_id'), 'channels', ['youtube_channel_id'], unique=True)
    op.create_table('llms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment="Model name (e.g., 'gpt-4', 'claude-2')"),
    sa.Column('description', sa.String(length=500), nullable=True, comment='Model capabilities and characteristics'),
    sa.Column('base_cost_per_token', sa.Numeric(precision=10, scale=8), nullable=False, comment='Base cost per token in USD'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'base_cost_per_token', name='uq_llm_name_cost')
    )
    op.create_index(op.f('ix_llms_id'), 'llms', ['id'], unique=False)
    op.create_index(op.f('ix_llms_name'), 'llms', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False, comment='Unique username for the user'),
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's email address"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('videos',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('youtube_id', sa.String(length=16), nullable=False, comment='Unique YouTube video ID'),
    sa.Column('title', sa.String(length=255), nullable=False, comment='Video title'),
    sa.Column('description', sa.Text(), nullable=True, comment='Video description text'),
    sa.Column('duration', sa.Integer(), nullable=True, comment='Duration in seconds'),
    sa.Column('upload_date', sa.String(length=8), nullable=True, comment='Upload date in YYYYMMDD format'),
    sa.Column('webpage_url', sa.String(length=100), nullable=False, comment='YouTube video URL'),
    sa.Column('thumbnail', sa.String(length=255), nullable=True, comment='Video thumbnail URL'),
    sa.Column('view_count', sa.BigInteger(), nullable=True, comment='Current view count from YouTube'),
    sa.Column('like_count', sa.Integer(), nullable=True, comment='Current like count from YouTube'),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Array of video tags'),
    sa.Column('categories', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Array of video categories'),
    sa.Column('chapters', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Array of video chapters'),
    sa.Column('summary', sa.Text(), nullable=True, comment='AI-generated summary'),
    sa.Column('sentiment_score', sa.Integer(), nullable=True, comment='Sentiment analysis score'),
    sa.Column('processing_status', sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED', name='processingstatus'), nullable=False, comment='Current state of video processing'),
    sa.Column('processed', sa.Boolean(), nullable=False, comment='Processing completion flag'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error details if processing failed'),
    sa.Column('last_processed', sa.DateTime(timezone=True), nullable=True, comment='Last processing attempt'),
    sa.Column('channel_id', sa.Integer(), nullable=False, comment='Associated channel'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['channel_id'], ['channels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_videos_channel_id'), 'videos', ['channel_id'], unique=False)
    op.create_index(op.f('ix_videos_id'), 'videos', ['id'], unique=False)
    op.create_index(op.f('ix_videos_youtube_id'), 'videos', ['youtube_id'], unique=True)
    op.create_table('digests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False, comment='Associated video'),
    sa.Column('llm_id', sa.Integer(), nullable=False, comment='LLM model used for generation'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User who requested the digest'),
    sa.Column('digest', sa.Text(), nullable=False, comment='The actual digest text content'),
    sa.Column('digest_type', sa.Enum('HIGHLIGHTS', 'CHAPTERS', 'DETAILED', 'SUMMARY', name='digesttype'), nullable=False, comment='Type of digest generated'),
    sa.Column('tokens_used', sa.Integer(), nullable=False, comment='Number of tokens consumed by LLM'),
    sa.Column('cost', sa.Float(), nullable=False, comment='Cost of generation in USD'),
    sa.Column('model_version', sa.String(length=50), nullable=False, comment='Specific version of LLM used'),
    sa.Column('generated_at', sa.DateTime(timezone=True), nullable=False, comment='When digest was created'),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True, comment='Last modification time'),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional metadata (e.g., chapter timestamps)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['llm_id'], ['llms.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_digests_id'), 'digests', ['id'], unique=False)
    op.create_index(op.f('ix_digests_llm_id'), 'digests', ['llm_id'], unique=False)
    op.create_index(op.f('ix_digests_user_id'), 'digests', ['user_id'], unique=False)
    op.create_index(op.f('ix_digests_video_id'), 'digests', ['video_id'], unique=False)
    op.create_table('processing_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False, comment='Associated video'),
    sa.Column('llm_id', sa.Integer(), nullable=False, comment='LLM model used'),
    sa.Column('request_type', sa.Enum('SUMMARIZE', 'ANALYZE_SENTIMENT', 'GENERATE_CHAPTERS', 'EXTRACT_HIGHLIGHTS', 'CUSTOM', name='requesttype'), nullable=False, comment='Type of processing request'),
    sa.Column('tokens_used', sa.Integer(), nullable=False, comment='Number of tokens consumed'),
    sa.Column('cost_estimate', sa.Float(), nullable=False, comment='Estimated cost in USD'),
    sa.Column('input_tokens', sa.Integer(), nullable=True, comment='Number of input tokens'),
    sa.Column('output_tokens', sa.Integer(), nullable=True, comment='Number of output tokens'),
    sa.Column('duration_ms', sa.Integer(), nullable=True, comment='Processing duration in milliseconds'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False, comment='When processing started'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When processing finished'),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Error information if failed'),
    sa.Column('request_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Parameters used in the request'),
    sa.Column('response_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Metadata from the response'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['llm_id'], ['llms.id'], ),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_processing_logs_id'), 'processing_logs', ['id'], unique=False)
    op.create_index(op.f('ix_processing_logs_llm_id'), 'processing_logs', ['llm_id'], unique=False)
    op.create_index(op.f('ix_processing_logs_video_id'), 'processing_logs', ['video_id'], unique=False)
    op.create_table('transcripts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False, comment='Associated video'),
    sa.Column('source_url', sa.String(length=500), nullable=False, comment='URL where transcript was obtained'),
    sa.Column('content', sa.Text(), nullable=True, comment='Full transcript text content'),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSED', 'FAILED', name='transcriptstatus'), nullable=False, comment='Current processing status'),
    sa.Column('fetched_at', sa.DateTime(timezone=True), nullable=True, comment='When transcript was retrieved'),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True, comment='When processing completed'),
    sa.Column('error_log', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Processing errors and details'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transcripts_id'), 'transcripts', ['id'], unique=False)
    op.create_index(op.f('ix_transcripts_video_id'), 'transcripts', ['video_id'], unique=False)
    op.create_table('digest_interactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User who performed the action'),
    sa.Column('digest_id', sa.Integer(), nullable=False, comment='Digest being interacted with'),
    sa.Column('video_id', sa.Integer(), nullable=False, comment='Video associated with the digest'),
    sa.Column('action', sa.Enum('SKIPPED', 'WATCHED', 'SAVED', 'SHARED', name='actiontype'), nullable=False, comment='Type of interaction (watched, skipped, etc.)'),
    sa.Column('action_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the interaction occurred'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['digest_id'], ['digests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_digest_interactions_action_at'), 'digest_interactions', ['action_at'], unique=False)
    op.create_index(op.f('ix_digest_interactions_digest_id'), 'digest_interactions', ['digest_id'], unique=False)
    op.create_index(op.f('ix_digest_interactions_id'), 'digest_interactions', ['id'], unique=False)
    op.create_index(op.f('ix_digest_interactions_user_id'), 'digest_interactions', ['user_id'], unique=False)
    op.create_index(op.f('ix_digest_interactions_video_id'), 'digest_interactions', ['video_id'], unique=False)
    op.create_table('user_digests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User who saved the digest'),
    sa.Column('digest_id', sa.Integer(), nullable=False, comment='Digest that was saved'),
    sa.Column('added_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the digest was saved'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['digest_id'], ['digests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'digest_id', name='uq_user_digest')
    )
    op.create_index(op.f('ix_user_digests_added_at'), 'user_digests', ['added_at'], unique=False)
    op.create_index(op.f('ix_user_digests_digest_id'), 'user_digests', ['digest_id'], unique=False)
    op.create_index(op.f('ix_user_digests_id'), 'user_digests', ['id'], unique=False)
    op.create_index(op.f('ix_user_digests_user_id'), 'user_digests', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_digests_user_id'), table_name='user_digests')
    op.drop_index(op.f('ix_user_digests_id'), table_name='user_digests')
    op.drop_index(op.f('ix_user_digests_digest_id'), table_name='user_digests')
    op.drop_index(op.f('ix_user_digests_added_at'), table_name='user_digests')
    op.drop_table('user_digests')
    op.drop_index(op.f('ix_digest_interactions_video_id'), table_name='digest_interactions')
    op.drop_index(op.f('ix_digest_interactions_user_id'), table_name='digest_interactions')
    op.drop_index(op.f('ix_digest_interactions_id'), table_name='digest_interactions')
    op.drop_index(op.f('ix_digest_interactions_digest_id'), table_name='digest_interactions')
    op.drop_index(op.f('ix_digest_interactions_action_at'), table_name='digest_interactions')
    op.drop_table('digest_interactions')
    op.drop_index(op.f('ix_transcripts_video_id'), table_name='transcripts')
    op.drop_index(op.f('ix_transcripts_id'), table_name='transcripts')
    op.drop_table('transcripts')
    op.drop_index(op.f('ix_processing_logs_video_id'), table_name='processing_logs')
    op.drop_index(op.f('ix_processing_logs_llm_id'), table_name='processing_logs')
    op.drop_index(op.f('ix_processing_logs_id'), table_name='processing_logs')
    op.drop_table('processing_logs')
    op.drop_index(op.f('ix_digests_video_id'), table_name='digests')
    op.drop_index(op.f('ix_digests_user_id'), table_name='digests')
    op.drop_index(op.f('ix_digests_llm_id'), table_name='digests')
    op.drop_index(op.f('ix_digests_id'), table_name='digests')
    op.drop_table('digests')
    op.drop_index(op.f('ix_videos_youtube_id'), table_name='videos')
    op.drop_index(op.f('ix_videos_id'), table_name='videos')
    op.drop_index(op.f('ix_videos_channel_id'), table_name='videos')
    op.drop_table('videos')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_llms_name'), table_name='llms')
    op.drop_index(op.f('ix_llms_id'), table_name='llms')
    op.drop_table('llms')
    op.drop_index(op.f('ix_channels_youtube_channel_id'), table_name='channels')
    op.drop_index(op.f('ix_channels_id'), table_name='channels')
    op.drop_table('channels')
    op.drop_index(op.f('ix_categories_youtube_category_id'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
