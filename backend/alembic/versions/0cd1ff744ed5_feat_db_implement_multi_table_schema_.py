"""âœ¨ feat(db): implement multi-table schema for video digest system

Revision ID: 0cd1ff744ed5
Revises: 6dfc2be44bb5
Create Date: 2025-02-16 03:32:31.121312

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0cd1ff744ed5'
down_revision = '6dfc2be44bb5'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('youtube_category_id', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_id'), 'categories', ['id'], unique=False)
    op.create_index(op.f('ix_categories_youtube_category_id'), 'categories', ['youtube_category_id'], unique=True)
    op.create_table('llms',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('base_cost_per_token', sa.Numeric(precision=10, scale=8), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_llms_id'), 'llms', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('digests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False),
    sa.Column('llm_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('digest', sa.Text(), nullable=False),
    sa.Column('digest_type', sa.String(length=50), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Float(), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=False),
    sa.Column('generated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['llm_id'], ['llms.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_digests_id'), 'digests', ['id'], unique=False)
    op.create_table('processing_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False),
    sa.Column('llm_id', sa.Integer(), nullable=False),
    sa.Column('request_type', sa.String(length=50), nullable=False),
    sa.Column('tokens_used', sa.Integer(), nullable=False),
    sa.Column('cost_estimate', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['llm_id'], ['llms.id'], ),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_processing_logs_id'), 'processing_logs', ['id'], unique=False)
    op.create_table('transcripts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False),
    sa.Column('source_url', sa.String(length=500), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'PROCESSED', 'FAILED', name='transcriptstatus'), nullable=False),
    sa.Column('fetched_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_log', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_transcripts_id'), 'transcripts', ['id'], unique=False)
    op.create_table('digest_interactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('digest_id', sa.Integer(), nullable=False),
    sa.Column('video_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.Enum('SKIPPED', 'WATCHED', name='actiontype'), nullable=False),
    sa.Column('action_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['digest_id'], ['digests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['video_id'], ['videos.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_digest_interactions_id'), 'digest_interactions', ['id'], unique=False)
    op.create_table('user_digests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('digest_id', sa.Integer(), nullable=False),
    sa.Column('added_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['digest_id'], ['digests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_digests_id'), 'user_digests', ['id'], unique=False)
    op.alter_column('channels', 'youtube_channel_id',
               existing_type=sa.VARCHAR(length=32),
               comment='YouTube channel ID',
               existing_nullable=False)
    op.alter_column('channels', 'name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False,
               comment='Channel name')
    op.alter_column('channels', 'description',
               existing_type=sa.VARCHAR(length=5000),
               comment='Channel description',
               existing_nullable=True)
    op.alter_column('channels', 'thumbnail_url',
               existing_type=sa.VARCHAR(length=255),
               comment='Channel thumbnail URL',
               existing_nullable=True)
    op.alter_column('channels', 'subscriber_count',
               existing_type=sa.INTEGER(),
               comment='Number of subscribers',
               existing_nullable=True)
    op.alter_column('channels', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment='Channel verification status',
               existing_nullable=True)
    op.alter_column('channels', 'uploader',
               existing_type=sa.VARCHAR(length=100),
               comment='Uploader name',
               existing_nullable=True)
    op.alter_column('channels', 'uploader_id',
               existing_type=sa.VARCHAR(length=100),
               comment='Uploader handle/ID',
               existing_nullable=True)
    op.alter_column('channels', 'uploader_url',
               existing_type=sa.VARCHAR(length=255),
               comment='Uploader URL',
               existing_nullable=True)
    op.alter_column('channels', 'channel_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Additional channel metadata',
               existing_nullable=True)
    op.alter_column('channels', 'last_updated',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last metadata update',
               existing_nullable=True)
    op.drop_constraint('channels_youtube_channel_id_key', 'channels', type_='unique')
    op.create_index(op.f('ix_channels_id'), 'channels', ['id'], unique=False)
    op.create_index(op.f('ix_channels_youtube_channel_id'), 'channels', ['youtube_channel_id'], unique=True)
    op.add_column('videos', sa.Column('webpage_url', sa.String(length=100), nullable=True, comment='YouTube video URL'))
    op.add_column('videos', sa.Column('thumbnail', sa.String(length=255), nullable=True, comment='Thumbnail URL'))
    op.add_column('videos', sa.Column('chapters', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Array of video chapters'))
    op.alter_column('videos', 'youtube_id',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=16),
               comment='YouTube video ID',
               existing_nullable=True)
    op.alter_column('videos', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment='Video title',
               existing_nullable=True)
    op.alter_column('videos', 'description',
               existing_type=sa.TEXT(),
               comment='Video description',
               existing_nullable=True)
    op.alter_column('videos', 'duration',
               existing_type=sa.INTEGER(),
               comment='Duration in seconds',
               existing_nullable=True)
    op.alter_column('videos', 'upload_date',
               existing_type=sa.VARCHAR(length=8),
               comment='Upload date in YYYYMMDD format',
               existing_nullable=True)
    op.alter_column('videos', 'view_count',
               existing_type=sa.BIGINT(),
               comment='Number of views',
               existing_nullable=True)
    op.alter_column('videos', 'like_count',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               comment='Number of likes',
               existing_nullable=True)
    op.alter_column('videos', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Array of video tags',
               existing_nullable=True)
    op.alter_column('videos', 'categories',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Array of video categories',
               existing_nullable=True)
    op.alter_column('videos', 'summary',
               existing_type=sa.TEXT(),
               comment='AI-generated summary',
               existing_nullable=True)
    op.alter_column('videos', 'sentiment_score',
               existing_type=sa.INTEGER(),
               comment='Sentiment analysis score',
               existing_nullable=True)
    op.alter_column('videos', 'transcript_source',
               existing_type=sa.VARCHAR(length=10),
               comment='Source of transcript: manual or auto',
               existing_nullable=True)
    op.alter_column('videos', 'openai_usage',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='OpenAI API usage data',
               existing_nullable=True)
    op.alter_column('videos', 'last_processed',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index(op.f('ix_videos_channel_id'), 'videos', ['channel_id'], unique=False)
    op.create_foreign_key(None, 'videos', 'channels', ['channel_id'], ['id'])
    op.drop_column('videos', 'thumbnail_url')
    op.drop_column('videos', 'channel_title')
    op.drop_column('videos', 'url')
    op.drop_column('videos', 'subscriber_count')
    op.drop_column('videos', 'transcript')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('videos', sa.Column('transcript', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('videos', sa.Column('subscriber_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('videos', sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('videos', sa.Column('channel_title', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('videos', sa.Column('thumbnail_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'videos', type_='foreignkey')
    op.drop_index(op.f('ix_videos_channel_id'), table_name='videos')
    op.alter_column('videos', 'last_processed',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('videos', 'openai_usage',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='OpenAI API usage data',
               existing_nullable=True)
    op.alter_column('videos', 'transcript_source',
               existing_type=sa.VARCHAR(length=10),
               comment=None,
               existing_comment='Source of transcript: manual or auto',
               existing_nullable=True)
    op.alter_column('videos', 'sentiment_score',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Sentiment analysis score',
               existing_nullable=True)
    op.alter_column('videos', 'summary',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='AI-generated summary',
               existing_nullable=True)
    op.alter_column('videos', 'categories',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Array of video categories',
               existing_nullable=True)
    op.alter_column('videos', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Array of video tags',
               existing_nullable=True)
    op.alter_column('videos', 'like_count',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               comment=None,
               existing_comment='Number of likes',
               existing_nullable=True)
    op.alter_column('videos', 'view_count',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='Number of views',
               existing_nullable=True)
    op.alter_column('videos', 'upload_date',
               existing_type=sa.VARCHAR(length=8),
               comment=None,
               existing_comment='Upload date in YYYYMMDD format',
               existing_nullable=True)
    op.alter_column('videos', 'duration',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Duration in seconds',
               existing_nullable=True)
    op.alter_column('videos', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Video description',
               existing_nullable=True)
    op.alter_column('videos', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Video title',
               existing_nullable=True)
    op.alter_column('videos', 'youtube_id',
               existing_type=sa.String(length=16),
               type_=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='YouTube video ID',
               existing_nullable=True)
    op.drop_column('videos', 'chapters')
    op.drop_column('videos', 'thumbnail')
    op.drop_column('videos', 'webpage_url')
    op.drop_index(op.f('ix_channels_youtube_channel_id'), table_name='channels')
    op.drop_index(op.f('ix_channels_id'), table_name='channels')
    op.create_unique_constraint('channels_youtube_channel_id_key', 'channels', ['youtube_channel_id'])
    op.alter_column('channels', 'last_updated',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Last metadata update',
               existing_nullable=True)
    op.alter_column('channels', 'channel_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Additional channel metadata',
               existing_nullable=True)
    op.alter_column('channels', 'uploader_url',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Uploader URL',
               existing_nullable=True)
    op.alter_column('channels', 'uploader_id',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Uploader handle/ID',
               existing_nullable=True)
    op.alter_column('channels', 'uploader',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Uploader name',
               existing_nullable=True)
    op.alter_column('channels', 'is_verified',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Channel verification status',
               existing_nullable=True)
    op.alter_column('channels', 'subscriber_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='Number of subscribers',
               existing_nullable=True)
    op.alter_column('channels', 'thumbnail_url',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Channel thumbnail URL',
               existing_nullable=True)
    op.alter_column('channels', 'description',
               existing_type=sa.VARCHAR(length=5000),
               comment=None,
               existing_comment='Channel description',
               existing_nullable=True)
    op.alter_column('channels', 'name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True,
               comment=None,
               existing_comment='Channel name')
    op.alter_column('channels', 'youtube_channel_id',
               existing_type=sa.VARCHAR(length=32),
               comment=None,
               existing_comment='YouTube channel ID',
               existing_nullable=False)
    op.drop_index(op.f('ix_user_digests_id'), table_name='user_digests')
    op.drop_table('user_digests')
    op.drop_index(op.f('ix_digest_interactions_id'), table_name='digest_interactions')
    op.drop_table('digest_interactions')
    op.drop_index(op.f('ix_transcripts_id'), table_name='transcripts')
    op.drop_table('transcripts')
    op.drop_index(op.f('ix_processing_logs_id'), table_name='processing_logs')
    op.drop_table('processing_logs')
    op.drop_index(op.f('ix_digests_id'), table_name='digests')
    op.drop_table('digests')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_llms_id'), table_name='llms')
    op.drop_table('llms')
    op.drop_index(op.f('ix_categories_youtube_category_id'), table_name='categories')
    op.drop_index(op.f('ix_categories_id'), table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
